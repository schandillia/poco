#--------------------------------------------------------------------------
# STAGE 1: DEPS
#--------------------------------------------------------------------------
FROM node:20.10-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies 
COPY package.json pnpm-lock.yaml* ./
RUN corepack enable pnpm
RUN pnpm i --frozen-lockfile

#--------------------------------------------------------------------------
# STAGE 2: BUILDER
#--------------------------------------------------------------------------
# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Disable NextJS telemetry during build.
ENV NEXT_TELEMETRY_DISABLED 1
# Generate Prisma Client
RUN npx prisma db push
RUN npx prisma generate

RUN corepack enable pnpm
RUN pnpm run build

#--------------------------------------------------------------------------
# STAGE 3: RUNNER
#--------------------------------------------------------------------------
# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Disable NextJS telemetry during runtime.
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000 

ARG DATABASE_URL
ENV DATABASE_URL $DATABASE_URL

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD ["node", "server.js"]